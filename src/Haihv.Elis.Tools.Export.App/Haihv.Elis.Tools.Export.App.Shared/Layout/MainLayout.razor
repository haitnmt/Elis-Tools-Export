@using Haihv.Elis.Tools.Data.Models
@using Haihv.Elis.Tools.Export.App.Shared.Extensions
@using Haihv.Elis.Tools.Export.App.Shared.Settings
@inherits LayoutComponentBase
<FluentLayout>
    <FluentHeader>
        Công cụ trích xuất dữ liệu ELIS SQL
    </FluentHeader>
    <FluentStack Class="main" Orientation="Orientation.Horizontal" Width="100%">
        <NavMenu />
        <FluentBodyContent Class="body-content">
            <div class="content">
                @Body
            </div>
        </FluentBodyContent>
    </FluentStack>
    <FluentFooter>
        <FluentLabel>
            @_renderConnectionInfo
        </FluentLabel>
        <FluentSpacer/>
        <FluentLabel>
            © 2023 Haihv ELIS Tools Export [@Factor | @Platform]
        </FluentLabel>
    </FluentFooter>
</FluentLayout>
<FluentToastProvider MaxToastCount="10" />

<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>

@inject IFormFactor FormFactor
@inject IMemoryCache MemoryCache
@inject IFileService FileService
@inject ILogger Logger
@inject NavigationManager NavigationManager
@code {
    private ConnectionInfo? _connectionInfo;
    private string _renderConnectionInfo = string.Empty;
    private readonly string _filePath = FilePath.PathConnectionString;
    private string Factor => FormFactor.GetFormFactor();
    private string Platform => FormFactor.GetPlatform();
    
    protected override async Task OnInitializedAsync()
    {
        _connectionInfo = await FileService.LoadConnectionInfoAsync(_filePath);
        if (_connectionInfo != null)
        {
            _renderConnectionInfo = _connectionInfo.RenderConnectionInfo();
            MemoryCache.Set(DataConnection.KeyConnectionInfo, _connectionInfo);
        }
        else
        {
            _renderConnectionInfo = "Chưa có thông tin kết nối dữ liệu";
            Logger.Warning("Chưa có thông tin kết nối dữ liệu");
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            // Check if the connection info is loaded, if not, redirect to the connection settings page.
            if (_connectionInfo is null)
            {
                NavigationManager.NavigateTo(UriPath.ConnectionSettings);
            }
        }
        base.OnAfterRender(firstRender);
    }
    
}