using Haihv.Elis.Tools.Data.Models;
using Haihv.Elis.Tools.Maui.Extensions;
using Haihv.Extensions.String;

namespace Haihv.Elis.Tools.App.ContentPages;

public partial class ShareConnectionPage : ContentPage
{
    private readonly ConnectionInfo _connectionInfo = null!;
    private bool _isPasswordVisible = true;
    public ShareConnectionPage()
    {
        InitializeComponent();
        SetupEventHandlers();
        InitializeDefaultState();
    }

    public ShareConnectionPage(ConnectionInfo connectionInfo) : this()
    {
        _connectionInfo = connectionInfo;
    }
    private void InitializeDefaultState()
    {
        // M·∫∑c ƒë·ªãnh s·ª≠ d·ª•ng m√£ h√≥a
        PasswordLayout.IsVisible = true;
        PasswordStrengthLayout.IsVisible = false;
        // T·∫°o v√†o hi·ªÉn th·ªã m·∫≠t kh·∫©u ng·∫´u nhi√™n
        PasswordEntry.IsPassword = !_isPasswordVisible;
        PasswordEntry.Text = EncryptionHelper.GenerateSecurePassword(16);
        UpdateTogglePasswordButton();

        // Thi·∫øt l·∫≠p th·ªùi gian h·∫øt h·∫°n m·∫∑c ƒë·ªãnh (1 ng√†y)
        InitializeExpiryDate();
    }
    private void SetupEventHandlers()
    {
        NoEncryptCheckBox.CheckedChanged += NoEncryptCheckBox_CheckedChanged;
        PasswordEntry.TextChanged += PasswordEntry_TextChanged;
        ExpiryDatePicker.DateSelected += ExpiryDatePicker_DateSelected;
    }

    private void InitializeExpiryDate()
    {
        // M·∫∑c ƒë·ªãnh h·∫øt h·∫°n sau 1 ng√†y
        ExpiryDatePicker.Date = DateTime.Now;
        ExpiryDatePicker.MinimumDate = DateTime.Now.AddDays(0); // T·ªëi thi·ªÉu l√† ng√†y h√¥m nay
        ExpiryDatePicker.MaximumDate = DateTime.Now.AddDays(5); // T·ªëi ƒëa l√† 5 ng√†y
        UpdateExpiryInfo();
    }

    private void UpdateExpiryInfo()
    {
        var selectedDate = ExpiryDatePicker.Date;
        var daysFromNow = (selectedDate.Date - DateTime.Now.Date).Days;

        if (daysFromNow <= 0)
        {
            ExpiryInfoLabel.Text = "T·ªáp s·∫Ω h·∫øt h·∫°n ngay h√¥m nay";
            ExpiryInfoLabel.TextColor = Colors.Green;
        }
        else if (daysFromNow == 1)
        {
            ExpiryInfoLabel.Text = "T·ªáp s·∫Ω h·∫øt h·∫°n ng√†y mai";
            ExpiryInfoLabel.TextColor = Colors.Blue;
        }
        else
        {
            ExpiryInfoLabel.Text = $"T·ªáp s·∫Ω h·∫øt h·∫°n sau {daysFromNow} ng√†y";
            if (daysFromNow < 4)
            {
                ExpiryInfoLabel.TextColor = Colors.Orange;
            }
            else
            {
                ExpiryInfoLabel.TextColor = Colors.Red;
            }
        }
    }

    private void NoEncryptCheckBox_CheckedChanged(object? sender, CheckedChangedEventArgs e)
    {
        // Logic ƒë·∫£o ng∆∞·ª£c: khi checkbox "kh√¥ng m√£ h√≥a" ƒë∆∞·ª£c ch·ªçn th√¨ ·∫©n ph·∫ßn m·∫≠t kh·∫©u
        PasswordLayout.IsVisible = !e.Value;
    }

    private void PasswordEntry_TextChanged(object? sender, TextChangedEventArgs e)
    {
        UpdatePasswordStrength(e.NewTextValue);
    }
    private void UpdatePasswordStrength(string password)
    {
        if (string.IsNullOrEmpty(password))
        {
            PasswordStrengthLayout.IsVisible = false;
            return;
        }

        PasswordStrengthLayout.IsVisible = true;

        try
        {
            int strength = EncryptionHelper.CheckPasswordStrength(password);
            double strengthPercent = strength / 100.0;

            PasswordStrengthBar.Progress = strengthPercent;

            // C·∫≠p nh·∫≠t m√†u s·∫Øc v√† text d·ª±a tr√™n ƒë·ªô m·∫°nh
            if (strength < 30)
            {
                PasswordStrengthLabel.Text = "Y·∫øu";
                PasswordStrengthLabel.TextColor = Colors.Red;
                PasswordStrengthBar.ProgressColor = Colors.Red;
            }
            else if (strength < 60)
            {
                PasswordStrengthLabel.Text = "Trung b√¨nh";
                PasswordStrengthLabel.TextColor = Colors.Orange;
                PasswordStrengthBar.ProgressColor = Colors.Orange;
            }
            else if (strength < 80)
            {
                PasswordStrengthLabel.Text = "M·∫°nh";
                PasswordStrengthLabel.TextColor = Colors.YellowGreen;
                PasswordStrengthBar.ProgressColor = Colors.YellowGreen;
            }
            else
            {
                PasswordStrengthLabel.Text = "R·∫•t m·∫°nh";
                PasswordStrengthLabel.TextColor = Colors.Green;
                PasswordStrengthBar.ProgressColor = Colors.Green;
            }
        }
        catch
        {
            PasswordStrengthLayout.IsVisible = false;
        }
    }

    private void ExpiryDatePicker_DateSelected(object? sender, DateChangedEventArgs e)
    {
        UpdateExpiryInfo();
    }

    private void ResetExpiryBtn_Clicked(object? sender, EventArgs e)
    {
        ExpiryDatePicker.Date = DateTime.Now;
        UpdateExpiryInfo();
    }

    private async void GeneratePasswordBtn_Clicked(object sender, EventArgs e)
    {
        try
        {
            string newPassword = EncryptionHelper.GenerateSecurePassword(16);
            PasswordEntry.Text = newPassword;
        }
        catch (Exception ex)
        {
            await DisplayAlert("L·ªói", $"Kh√¥ng th·ªÉ t·∫°o m·∫≠t kh·∫©u: {ex.Message}", "OK");
        }
    }

    private void TogglePasswordBtn_Clicked(object sender, EventArgs e)
    {
        _isPasswordVisible = !_isPasswordVisible;
        PasswordEntry.IsPassword = !_isPasswordVisible;
        UpdateTogglePasswordButton();
    }
    private void UpdateTogglePasswordButton()
    {
        // S·ª≠ d·ª•ng emoji thay v√¨ FontImageSource ƒë·ªÉ ƒë·∫£m b·∫£o hi·ªÉn th·ªã
        TogglePasswordBtn.Text = _isPasswordVisible ? "üôà" : "üëÅ";
    }

    private async void CopyPasswordBtn_Clicked(object sender, EventArgs e)
    {
        try
        {
            string password = PasswordEntry.Text?.Trim() ?? string.Empty;

            if (string.IsNullOrEmpty(password))
            {
                await DisplayAlert("Th√¥ng b√°o", "Kh√¥ng c√≥ m·∫≠t kh·∫©u ƒë·ªÉ copy", "OK");
                return;
            }

            await Clipboard.Default.SetTextAsync(password);

            // Hi·ªÉn th·ªã feedback ng·∫Øn
            var originalText = CopyPasswordBtn.Text;
            CopyPasswordBtn.Text = "‚úÖ";
            CopyPasswordBtn.IsEnabled = false;

            await DisplayAlert("Th√†nh c√¥ng", "ƒê√£ copy m·∫≠t kh·∫©u v√†o clipboard", "OK");
            CopyPasswordBtn.Text = originalText;
            CopyPasswordBtn.IsEnabled = true;

        }
        catch (Exception ex)
        {
            await DisplayAlert("L·ªói", $"Kh√¥ng th·ªÉ copy m·∫≠t kh·∫©u: {ex.Message}", "OK");
        }
    }

    private async void SaveBtn_Clicked(object sender, EventArgs e)
    {
        try
        {
            SaveBtn.IsEnabled = false;
            SaveBtn.Text = "ƒêang x·ª≠ l√Ω...";

            string secretKey = string.Empty;

            // Logic m·ªõi: m·∫∑c ƒë·ªãnh m√£ h√≥a, ch·ªâ kh√¥ng m√£ h√≥a khi NoEncryptCheckBox ƒë∆∞·ª£c ch·ªçn
            if (!NoEncryptCheckBox.IsChecked)
            {
                secretKey = PasswordEntry.Text?.Trim() ?? string.Empty;
                if (string.IsNullOrWhiteSpace(secretKey))
                {
                    await DisplayAlert("Th√¥ng b√°o", "Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u ho·∫∑c t·∫°o m·∫≠t kh·∫©u ng·∫´u nhi√™n!", "OK");
                    return;
                }
                if (secretKey.Length < 8)
                {
                    await DisplayAlert("Th√¥ng b√°o", "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 8 k√Ω t·ª±", "OK");
                    return;
                }
            }            // ƒê·∫∑t th·ªùi gian h·∫øt h·∫°n cho connection info
            _connectionInfo.ExpiryDate = ExpiryDatePicker.Date;

            // T·∫°o t·ªáp v√†o th∆∞ m·ª•c Downloads - m√£ h√≥a khi secretKey c√≥ gi√° tr·ªã, kh√¥ng m√£ h√≥a khi r·ªóng
            var (success, filePath) = string.IsNullOrEmpty(secretKey)
                ? await _connectionInfo.ExportConnectionSettings()
                : await _connectionInfo.ExportConnectionSettings(secretKey);

            if (!success)
            {
                await DisplayAlert("L·ªói", $"Kh√¥ng th·ªÉ t·∫°o t·ªáp: {filePath}", "OK");
                return;
            }

            // Hi·ªÉn th·ªã k·∫øt qu·∫£
            ShowResult(filePath);
        }
        catch (Exception ex)
        {
            await DisplayAlert("L·ªói", $"C√≥ l·ªói x·∫£y ra: {ex.Message}", "OK");
        }
        finally
        {
            SaveBtn.IsEnabled = true;
            SaveBtn.Text = "L∆∞u t·ªáp";
        }
    }
    private void ShowResult(string filePath)
    {
        // ·∫®n form nh·∫≠p li·ªáu v√† n√∫t ƒëi·ªÅu khi·ªÉn
        EncryptionOptionsLayout.IsVisible = false;
        PasswordLayout.IsVisible = false;
        ExpiryLayout.IsVisible = false;
        ButtonsLayout.IsVisible = false;

        // Hi·ªÉn th·ªã k·∫øt qu·∫£
        ResultLayout.IsVisible = true;
        FilePathLabel.Text = filePath;
    }

    private async void OpenLocationBtn_Clicked(object sender, EventArgs e)
    {
        try
        {
            string folderPath = Path.GetDirectoryName(FilePathLabel.Text) ?? "";
            if (!string.IsNullOrEmpty(folderPath) && Directory.Exists(folderPath))
            {
                await Launcher.Default.OpenAsync(new Uri($"file://{folderPath}"));
            }
        }
        catch (Exception ex)
        {
            await DisplayAlert("L·ªói", $"Kh√¥ng th·ªÉ m·ªü th∆∞ m·ª•c: {ex.Message}", "OK");
        }
    }

    private async void CloseBtn_Clicked(object sender, EventArgs e)
    {
        await Navigation.PopModalAsync();
    }

    private async void CancelBtn_Clicked(object sender, EventArgs e)
    {
        await Navigation.PopModalAsync();
    }

    protected override bool OnBackButtonPressed()
    {
        // X·ª≠ l√Ω khi ng∆∞·ªùi d√πng nh·∫•n n√∫t Back
        _ = Navigation.PopModalAsync();
        return true;
    }
}
